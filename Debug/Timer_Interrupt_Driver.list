
Timer_Interrupt_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000420  08000428  00001428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000420  08000420  00001428  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000420  08000420  00001428  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000420  08000428  00001428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000420  08000420  00001420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000424  08000424  00001424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000428  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000428  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ab5  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002de  00000000  00000000  00001f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  000021f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000058  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dda4  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c79  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005036f  00000000  00000000  00010ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006105c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000110  00000000  00000000  000610a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000611b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000408 	.word	0x08000408

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000408 	.word	0x08000408

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <Timer2_Interrupt_init>:

#define SysCLCK                  16000000UL

#define DIER_UIE                 (1U << 0)

void Timer2_Interrupt_init(int Prescaler, char SecOrFreq) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]

	uint32_t Preload_VAL = 0, Timer_Prescaler = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	2300      	movs	r3, #0
 8000226:	60bb      	str	r3, [r7, #8]

	Timer_Prescaler = 1600;
 8000228:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800022c:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800022e:	b672      	cpsid	i
}
 8000230:	bf00      	nop

	  __disable_irq();

	// Enable clock acess to timer 2

	RCC->APB1ENR |= TIM2EN  ;
 8000232:	4b25      	ldr	r3, [pc, #148]	@ (80002c8 <Timer2_Interrupt_init+0xb4>)
 8000234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000236:	4a24      	ldr	r2, [pc, #144]	@ (80002c8 <Timer2_Interrupt_init+0xb4>)
 8000238:	f043 0301 	orr.w	r3, r3, #1
 800023c:	6413      	str	r3, [r2, #64]	@ 0x40

    // set Timer prescaler to 2 ; CK_CNT (counter clock frequency ) = Timer peripheral clock /(PSC+1)


	 TIM2->PSC =  Timer_Prescaler -1 ; // 16 000 000 / 1600 --> 10 000
 800023e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	3b01      	subs	r3, #1
 8000246:	6293      	str	r3, [r2, #40]	@ 0x28

	// Enable Upcounting mode :  CR1_DIR

	 TIM2->CR1 |= CR1_DIR;
 8000248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000252:	f043 0310 	orr.w	r3, r3, #16
 8000256:	6013      	str	r3, [r2, #0]

	// read the preload value

	 if (SecOrFreq == 'h' ) {
 8000258:	78fb      	ldrb	r3, [r7, #3]
 800025a:	2b68      	cmp	r3, #104	@ 0x68
 800025c:	d107      	bne.n	800026e <Timer2_Interrupt_init+0x5a>

		 Preload_VAL =  ( SysCLCK/Timer_Prescaler)/ Prescaler  ;
 800025e:	4a1b      	ldr	r2, [pc, #108]	@ (80002cc <Timer2_Interrupt_init+0xb8>)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	fbb2 f2f3 	udiv	r2, r2, r3
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	fbb2 f3f3 	udiv	r3, r2, r3
 800026c:	60fb      	str	r3, [r7, #12]

	 }

	 if (SecOrFreq == 's' ) {
 800026e:	78fb      	ldrb	r3, [r7, #3]
 8000270:	2b73      	cmp	r3, #115	@ 0x73
 8000272:	d107      	bne.n	8000284 <Timer2_Interrupt_init+0x70>

			 Preload_VAL =  Prescaler * ( SysCLCK/Timer_Prescaler)  ;
 8000274:	4a15      	ldr	r2, [pc, #84]	@ (80002cc <Timer2_Interrupt_init+0xb8>)
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	fbb2 f3f3 	udiv	r3, r2, r3
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	fb02 f303 	mul.w	r3, r2, r3
 8000282:	60fb      	str	r3, [r7, #12]

		 }

	 TIM2->ARR = Preload_VAL - 1;
 8000284:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	3b01      	subs	r3, #1
 800028c:	62d3      	str	r3, [r2, #44]	@ 0x2c

     // clear counter

	 TIM2->CNT = 0;
 800028e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000292:	2200      	movs	r2, #0
 8000294:	625a      	str	r2, [r3, #36]	@ 0x24

	 // enable interrupt

	 TIM2->DIER |= DIER_UIE ;
 8000296:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	60d3      	str	r3, [r2, #12]

	 // Enable TIM2 interrupt in NVIC

	  NVIC_EnableIRQ(TIM2_IRQn);
 80002a6:	201c      	movs	r0, #28
 80002a8:	f7ff ff96 	bl	80001d8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002ac:	b662      	cpsie	i
}
 80002ae:	bf00      	nop

	  __enable_irq();

	// Enable counter TIMx_CR1 : CEN bit

    TIM2->CR1 |= CR1_CEN ;
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]

}
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40023800 	.word	0x40023800
 80002cc:	00f42400 	.word	0x00f42400

080002d0 <GPIOD_init>:

void GPIOD_init(void){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0

	// enable clock access to port D

	RCC->AHB1ENR |= GPIOD_EN ;
 80002d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <GPIOD_init+0x34>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000304 <GPIOD_init+0x34>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PD15 mode to output

   GPIOD->MODER |=  GPIOD_MODER_1 ;
 80002e0:	4b09      	ldr	r3, [pc, #36]	@ (8000308 <GPIOD_init+0x38>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a08      	ldr	r2, [pc, #32]	@ (8000308 <GPIOD_init+0x38>)
 80002e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002ea:	6013      	str	r3, [r2, #0]

   GPIOD->MODER &=  ~GPIOD_MODER_2 ;
 80002ec:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <GPIOD_init+0x38>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a05      	ldr	r2, [pc, #20]	@ (8000308 <GPIOD_init+0x38>)
 80002f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80002f6:	6013      	str	r3, [r2, #0]

}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40023800 	.word	0x40023800
 8000308:	40020c00 	.word	0x40020c00

0800030c <main>:
#include "stm32f4xx.h"
#include "Timer.h"

static void TIM2_callback(void);

int main(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0


	GPIOD_init();
 8000310:	f7ff ffde 	bl	80002d0 <GPIOD_init>

	Timer2_Interrupt_init(2, 'h');
 8000314:	2168      	movs	r1, #104	@ 0x68
 8000316:	2002      	movs	r0, #2
 8000318:	f7ff ff7c 	bl	8000214 <Timer2_Interrupt_init>

	while (1) {
 800031c:	bf00      	nop
 800031e:	e7fd      	b.n	800031c <main+0x10>

08000320 <TIM2_callback>:
}


// static so that it can be only accessed here

static void TIM2_callback(void) {
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0


	// toggle PD15

	GPIOD->ODR ^= (1U << LED_PIN );
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <TIM2_callback+0x1c>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a04      	ldr	r2, [pc, #16]	@ (800033c <TIM2_callback+0x1c>)
 800032a:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 800032e:	6153      	str	r3, [r2, #20]


}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40020c00 	.word	0x40020c00

08000340 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0


	//check if counting is done

     if (TIM2->SR & SR_UIF) {
 8000344:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000348:	691b      	ldr	r3, [r3, #16]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	2b00      	cmp	r3, #0
 8000350:	d009      	beq.n	8000366 <TIM2_IRQHandler+0x26>

    	 // clear flag

    	 TIM2->SR &= ~SR_UIF;
 8000352:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000356:	691b      	ldr	r3, [r3, #16]
 8000358:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800035c:	f023 0301 	bic.w	r3, r3, #1
 8000360:	6113      	str	r3, [r2, #16]

    	// do something

    	 TIM2_callback();
 8000362:	f7ff ffdd 	bl	8000320 <TIM2_callback>


     }


}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	@ (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	@ (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	@ (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	@ (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	@ (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	@ (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800039a:	f000 f811 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800039e:	f7ff ffb5 	bl	800030c <main>

080003a2 <LoopForever>:

LoopForever:
  b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b0:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 80003b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b8:	2000001c 	.word	0x2000001c

080003bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC_IRQHandler>
	...

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	@ (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	@ (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000420 	.word	0x08000420
 80003fc:	08000420 	.word	0x08000420
 8000400:	08000420 	.word	0x08000420
 8000404:	08000424 	.word	0x08000424

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
